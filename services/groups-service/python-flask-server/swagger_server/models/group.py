# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.group_member import GroupMember
from swagger_server import util


class Group(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, group_id: int=None, group_host_id: int=None, event_id: int=None, group_name: str=None, group_img: str=None, group_desc: str=None, group_members: List[GroupMember]=None):  # noqa: E501
        """Group - a model defined in Swagger

        :param group_id: The group_id of this Group.  # noqa: E501
        :type group_id: int
        :param group_host_id: The group_host_id of this Group.  # noqa: E501
        :type group_host_id: int
        :param event_id: The event_id of this Group.  # noqa: E501
        :type event_id: int
        :param group_name: The group_name of this Group.  # noqa: E501
        :type group_name: str
        :param group_img: The group_img of this Group.  # noqa: E501
        :type group_img: str
        :param group_desc: The group_desc of this Group.  # noqa: E501
        :type group_desc: str
        :param group_members: The group_members of this Group.  # noqa: E501
        :type group_members: List[GroupMember]
        """
        self.swagger_types = {
            'group_id': int,
            'group_host_id': int,
            'event_id': int,
            'group_name': str,
            'group_img': str,
            'group_desc': str,
            'group_members': List[GroupMember]
        }

        self.attribute_map = {
            'group_id': 'group_id',
            'group_host_id': 'group_host_id',
            'event_id': 'event_id',
            'group_name': 'group_name',
            'group_img': 'group_img',
            'group_desc': 'group_desc',
            'group_members': 'group_members'
        }

        self._group_id = group_id
        self._group_host_id = group_host_id
        self._event_id = event_id
        self._group_name = group_name
        self._group_img = group_img
        self._group_desc = group_desc
        self._group_members = group_members

    @classmethod
    def from_dict(cls, dikt) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Group of this Group.  # noqa: E501
        :rtype: Group
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self) -> int:
        """Gets the group_id of this Group.


        :return: The group_id of this Group.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: int):
        """Sets the group_id of this Group.


        :param group_id: The group_id of this Group.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def group_host_id(self) -> int:
        """Gets the group_host_id of this Group.


        :return: The group_host_id of this Group.
        :rtype: int
        """
        return self._group_host_id

    @group_host_id.setter
    def group_host_id(self, group_host_id: int):
        """Sets the group_host_id of this Group.


        :param group_host_id: The group_host_id of this Group.
        :type group_host_id: int
        """

        self._group_host_id = group_host_id

    @property
    def event_id(self) -> int:
        """Gets the event_id of this Group.


        :return: The event_id of this Group.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id: int):
        """Sets the event_id of this Group.


        :param event_id: The event_id of this Group.
        :type event_id: int
        """

        self._event_id = event_id

    @property
    def group_name(self) -> str:
        """Gets the group_name of this Group.


        :return: The group_name of this Group.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name: str):
        """Sets the group_name of this Group.


        :param group_name: The group_name of this Group.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def group_img(self) -> str:
        """Gets the group_img of this Group.


        :return: The group_img of this Group.
        :rtype: str
        """
        return self._group_img

    @group_img.setter
    def group_img(self, group_img: str):
        """Sets the group_img of this Group.


        :param group_img: The group_img of this Group.
        :type group_img: str
        """

        self._group_img = group_img

    @property
    def group_desc(self) -> str:
        """Gets the group_desc of this Group.


        :return: The group_desc of this Group.
        :rtype: str
        """
        return self._group_desc

    @group_desc.setter
    def group_desc(self, group_desc: str):
        """Sets the group_desc of this Group.


        :param group_desc: The group_desc of this Group.
        :type group_desc: str
        """

        self._group_desc = group_desc

    @property
    def group_members(self) -> List[GroupMember]:
        """Gets the group_members of this Group.


        :return: The group_members of this Group.
        :rtype: List[GroupMember]
        """
        return self._group_members

    @group_members.setter
    def group_members(self, group_members: List[GroupMember]):
        """Sets the group_members of this Group.


        :param group_members: The group_members of this Group.
        :type group_members: List[GroupMember]
        """

        self._group_members = group_members
