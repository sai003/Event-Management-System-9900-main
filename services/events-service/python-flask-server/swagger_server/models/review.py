# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Review(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, review_id: int=None, event_id: int=None, reviewer_account_id: int=None, upvotes: int=None, rating: int=None, flag_count: int=None, review_text: str=None, reply_text: str=None, review_timestamp: str=None, review_status: str=None, review_interaction: object=None):  # noqa: E501
        """Review - a model defined in Swagger

        :param review_id: The review_id of this Review.  # noqa: E501
        :type review_id: int
        :param event_id: The event_id of this Review.  # noqa: E501
        :type event_id: int
        :param reviewer_account_id: The reviewer_account_id of this Review.  # noqa: E501
        :type reviewer_account_id: int
        :param upvotes: The upvotes of this Review.  # noqa: E501
        :type upvotes: int
        :param rating: The rating of this Review.  # noqa: E501
        :type rating: int
        :param flag_count: The flag_count of this Review.  # noqa: E501
        :type flag_count: int
        :param review_text: The review_text of this Review.  # noqa: E501
        :type review_text: str
        :param reply_text: The reply_text of this Review.  # noqa: E501
        :type reply_text: str
        :param review_timestamp: The review_timestamp of this Review.  # noqa: E501
        :type review_timestamp: str
        :param review_status: The review_status of this Review.  # noqa: E501
        :type review_status: str
        :param review_interaction: The review_interaction of this Review.  # noqa: E501
        :type review_interaction: object
        """
        self.swagger_types = {
            'review_id': int,
            'event_id': int,
            'reviewer_account_id': int,
            'upvotes': int,
            'rating': int,
            'flag_count': int,
            'review_text': str,
            'reply_text': str,
            'review_timestamp': str,
            'review_status': str,
            'review_interaction': object
        }

        self.attribute_map = {
            'review_id': 'review_id',
            'event_id': 'event_id',
            'reviewer_account_id': 'reviewer_account_id',
            'upvotes': 'upvotes',
            'rating': 'rating',
            'flag_count': 'flag_count',
            'review_text': 'review_text',
            'reply_text': 'reply_text',
            'review_timestamp': 'review_timestamp',
            'review_status': 'review_status',
            'review_interaction': 'review_interaction'
        }

        self._review_id = review_id
        self._event_id = event_id
        self._reviewer_account_id = reviewer_account_id
        self._upvotes = upvotes
        self._rating = rating
        self._flag_count = flag_count
        self._review_text = review_text
        self._reply_text = reply_text
        self._review_timestamp = review_timestamp
        self._review_status = review_status
        self._review_interaction = review_interaction

    @classmethod
    def from_dict(cls, dikt) -> 'Review':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Review of this Review.  # noqa: E501
        :rtype: Review
        """
        return util.deserialize_model(dikt, cls)

    @property
    def review_id(self) -> int:
        """Gets the review_id of this Review.


        :return: The review_id of this Review.
        :rtype: int
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id: int):
        """Sets the review_id of this Review.


        :param review_id: The review_id of this Review.
        :type review_id: int
        """

        self._review_id = review_id

    @property
    def event_id(self) -> int:
        """Gets the event_id of this Review.


        :return: The event_id of this Review.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id: int):
        """Sets the event_id of this Review.


        :param event_id: The event_id of this Review.
        :type event_id: int
        """

        self._event_id = event_id

    @property
    def reviewer_account_id(self) -> int:
        """Gets the reviewer_account_id of this Review.


        :return: The reviewer_account_id of this Review.
        :rtype: int
        """
        return self._reviewer_account_id

    @reviewer_account_id.setter
    def reviewer_account_id(self, reviewer_account_id: int):
        """Sets the reviewer_account_id of this Review.


        :param reviewer_account_id: The reviewer_account_id of this Review.
        :type reviewer_account_id: int
        """

        self._reviewer_account_id = reviewer_account_id

    @property
    def upvotes(self) -> int:
        """Gets the upvotes of this Review.


        :return: The upvotes of this Review.
        :rtype: int
        """
        return self._upvotes

    @upvotes.setter
    def upvotes(self, upvotes: int):
        """Sets the upvotes of this Review.


        :param upvotes: The upvotes of this Review.
        :type upvotes: int
        """

        self._upvotes = upvotes

    @property
    def rating(self) -> int:
        """Gets the rating of this Review.


        :return: The rating of this Review.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating: int):
        """Sets the rating of this Review.


        :param rating: The rating of this Review.
        :type rating: int
        """

        self._rating = rating

    @property
    def flag_count(self) -> int:
        """Gets the flag_count of this Review.


        :return: The flag_count of this Review.
        :rtype: int
        """
        return self._flag_count

    @flag_count.setter
    def flag_count(self, flag_count: int):
        """Sets the flag_count of this Review.


        :param flag_count: The flag_count of this Review.
        :type flag_count: int
        """

        self._flag_count = flag_count

    @property
    def review_text(self) -> str:
        """Gets the review_text of this Review.


        :return: The review_text of this Review.
        :rtype: str
        """
        return self._review_text

    @review_text.setter
    def review_text(self, review_text: str):
        """Sets the review_text of this Review.


        :param review_text: The review_text of this Review.
        :type review_text: str
        """

        self._review_text = review_text

    @property
    def reply_text(self) -> str:
        """Gets the reply_text of this Review.


        :return: The reply_text of this Review.
        :rtype: str
        """
        return self._reply_text

    @reply_text.setter
    def reply_text(self, reply_text: str):
        """Sets the reply_text of this Review.


        :param reply_text: The reply_text of this Review.
        :type reply_text: str
        """

        self._reply_text = reply_text

    @property
    def review_timestamp(self) -> str:
        """Gets the review_timestamp of this Review.


        :return: The review_timestamp of this Review.
        :rtype: str
        """
        return self._review_timestamp

    @review_timestamp.setter
    def review_timestamp(self, review_timestamp: str):
        """Sets the review_timestamp of this Review.


        :param review_timestamp: The review_timestamp of this Review.
        :type review_timestamp: str
        """

        self._review_timestamp = review_timestamp

    @property
    def review_status(self) -> str:
        """Gets the review_status of this Review.


        :return: The review_status of this Review.
        :rtype: str
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status: str):
        """Sets the review_status of this Review.


        :param review_status: The review_status of this Review.
        :type review_status: str
        """
        allowed_values = ["Active", "Removed"]  # noqa: E501
        if review_status not in allowed_values:
            raise ValueError(
                "Invalid value for `review_status` ({0}), must be one of {1}"
                .format(review_status, allowed_values)
            )

        self._review_status = review_status

    @property
    def review_interaction(self) -> object:
        """Gets the review_interaction of this Review.


        :return: The review_interaction of this Review.
        :rtype: object
        """
        return self._review_interaction

    @review_interaction.setter
    def review_interaction(self, review_interaction: object):
        """Sets the review_interaction of this Review.


        :param review_interaction: The review_interaction of this Review.
        :type review_interaction: object
        """

        self._review_interaction = review_interaction
