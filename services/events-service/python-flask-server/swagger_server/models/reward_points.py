# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RewardPoints(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, reward_points_id: int=None, account_id: int=None, event_id: int=None, booking_id: int=None, reward_points_amount: float=None, reward_points_status: str=None):  # noqa: E501
        """RewardPoints - a model defined in Swagger

        :param reward_points_id: The reward_points_id of this RewardPoints.  # noqa: E501
        :type reward_points_id: int
        :param account_id: The account_id of this RewardPoints.  # noqa: E501
        :type account_id: int
        :param event_id: The event_id of this RewardPoints.  # noqa: E501
        :type event_id: int
        :param booking_id: The booking_id of this RewardPoints.  # noqa: E501
        :type booking_id: int
        :param reward_points_amount: The reward_points_amount of this RewardPoints.  # noqa: E501
        :type reward_points_amount: float
        :param reward_points_status: The reward_points_status of this RewardPoints.  # noqa: E501
        :type reward_points_status: str
        """
        self.swagger_types = {
            'reward_points_id': int,
            'account_id': int,
            'event_id': int,
            'booking_id': int,
            'reward_points_amount': float,
            'reward_points_status': str
        }

        self.attribute_map = {
            'reward_points_id': 'reward_points_id',
            'account_id': 'account_id',
            'event_id': 'event_id',
            'booking_id': 'booking_id',
            'reward_points_amount': 'reward_points_amount',
            'reward_points_status': 'reward_points_status'
        }

        self._reward_points_id = reward_points_id
        self._account_id = account_id
        self._event_id = event_id
        self._booking_id = booking_id
        self._reward_points_amount = reward_points_amount
        self._reward_points_status = reward_points_status

    @classmethod
    def from_dict(cls, dikt) -> 'RewardPoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RewardPoints of this RewardPoints.  # noqa: E501
        :rtype: RewardPoints
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reward_points_id(self) -> int:
        """Gets the reward_points_id of this RewardPoints.


        :return: The reward_points_id of this RewardPoints.
        :rtype: int
        """
        return self._reward_points_id

    @reward_points_id.setter
    def reward_points_id(self, reward_points_id: int):
        """Sets the reward_points_id of this RewardPoints.


        :param reward_points_id: The reward_points_id of this RewardPoints.
        :type reward_points_id: int
        """

        self._reward_points_id = reward_points_id

    @property
    def account_id(self) -> int:
        """Gets the account_id of this RewardPoints.


        :return: The account_id of this RewardPoints.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: int):
        """Sets the account_id of this RewardPoints.


        :param account_id: The account_id of this RewardPoints.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def event_id(self) -> int:
        """Gets the event_id of this RewardPoints.


        :return: The event_id of this RewardPoints.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id: int):
        """Sets the event_id of this RewardPoints.


        :param event_id: The event_id of this RewardPoints.
        :type event_id: int
        """

        self._event_id = event_id

    @property
    def booking_id(self) -> int:
        """Gets the booking_id of this RewardPoints.


        :return: The booking_id of this RewardPoints.
        :rtype: int
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id: int):
        """Sets the booking_id of this RewardPoints.


        :param booking_id: The booking_id of this RewardPoints.
        :type booking_id: int
        """

        self._booking_id = booking_id

    @property
    def reward_points_amount(self) -> float:
        """Gets the reward_points_amount of this RewardPoints.


        :return: The reward_points_amount of this RewardPoints.
        :rtype: float
        """
        return self._reward_points_amount

    @reward_points_amount.setter
    def reward_points_amount(self, reward_points_amount: float):
        """Sets the reward_points_amount of this RewardPoints.


        :param reward_points_amount: The reward_points_amount of this RewardPoints.
        :type reward_points_amount: float
        """

        self._reward_points_amount = reward_points_amount

    @property
    def reward_points_status(self) -> str:
        """Gets the reward_points_status of this RewardPoints.


        :return: The reward_points_status of this RewardPoints.
        :rtype: str
        """
        return self._reward_points_status

    @reward_points_status.setter
    def reward_points_status(self, reward_points_status: str):
        """Sets the reward_points_status of this RewardPoints.


        :param reward_points_status: The reward_points_status of this RewardPoints.
        :type reward_points_status: str
        """
        allowed_values = ["Pending", "Approved", "Cancelled"]  # noqa: E501
        if reward_points_status not in allowed_values:
            raise ValueError(
                "Invalid value for `reward_points_status` ({0}), must be one of {1}"
                .format(reward_points_status, allowed_values)
            )

        self._reward_points_status = reward_points_status
