# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Booking(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, booking_id: int=None, account_id: int=None, event_id: int=None, booking_status: str=None, booking_email: str=None, total_cost: float=None, card_name: str=None, card_number: str=None, qr_code: str=None, ticket_details: object=None):  # noqa: E501
        """Booking - a model defined in Swagger

        :param booking_id: The booking_id of this Booking.  # noqa: E501
        :type booking_id: int
        :param account_id: The account_id of this Booking.  # noqa: E501
        :type account_id: int
        :param event_id: The event_id of this Booking.  # noqa: E501
        :type event_id: int
        :param booking_status: The booking_status of this Booking.  # noqa: E501
        :type booking_status: str
        :param booking_email: The booking_email of this Booking.  # noqa: E501
        :type booking_email: str
        :param total_cost: The total_cost of this Booking.  # noqa: E501
        :type total_cost: float
        :param card_name: The card_name of this Booking.  # noqa: E501
        :type card_name: str
        :param card_number: The card_number of this Booking.  # noqa: E501
        :type card_number: str
        :param qr_code: The qr_code of this Booking.  # noqa: E501
        :type qr_code: str
        :param ticket_details: The ticket_details of this Booking.  # noqa: E501
        :type ticket_details: object
        """
        self.swagger_types = {
            'booking_id': int,
            'account_id': int,
            'event_id': int,
            'booking_status': str,
            'booking_email': str,
            'total_cost': float,
            'card_name': str,
            'card_number': str,
            'qr_code': str,
            'ticket_details': object
        }

        self.attribute_map = {
            'booking_id': 'booking_id',
            'account_id': 'account_id',
            'event_id': 'event_id',
            'booking_status': 'booking_status',
            'booking_email': 'booking_email',
            'total_cost': 'total_cost',
            'card_name': 'card_name',
            'card_number': 'card_number',
            'qr_code': 'qr_code',
            'ticket_details': 'ticket_details'
        }

        self._booking_id = booking_id
        self._account_id = account_id
        self._event_id = event_id
        self._booking_status = booking_status
        self._booking_email = booking_email
        self._total_cost = total_cost
        self._card_name = card_name
        self._card_number = card_number
        self._qr_code = qr_code
        self._ticket_details = ticket_details

    @classmethod
    def from_dict(cls, dikt) -> 'Booking':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Booking of this Booking.  # noqa: E501
        :rtype: Booking
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_id(self) -> int:
        """Gets the booking_id of this Booking.


        :return: The booking_id of this Booking.
        :rtype: int
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id: int):
        """Sets the booking_id of this Booking.


        :param booking_id: The booking_id of this Booking.
        :type booking_id: int
        """

        self._booking_id = booking_id

    @property
    def account_id(self) -> int:
        """Gets the account_id of this Booking.


        :return: The account_id of this Booking.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: int):
        """Sets the account_id of this Booking.


        :param account_id: The account_id of this Booking.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def event_id(self) -> int:
        """Gets the event_id of this Booking.


        :return: The event_id of this Booking.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id: int):
        """Sets the event_id of this Booking.


        :param event_id: The event_id of this Booking.
        :type event_id: int
        """

        self._event_id = event_id

    @property
    def booking_status(self) -> str:
        """Gets the booking_status of this Booking.


        :return: The booking_status of this Booking.
        :rtype: str
        """
        return self._booking_status

    @booking_status.setter
    def booking_status(self, booking_status: str):
        """Sets the booking_status of this Booking.


        :param booking_status: The booking_status of this Booking.
        :type booking_status: str
        """
        allowed_values = ["Booked", "Cancelled", "Completed"]  # noqa: E501
        if booking_status not in allowed_values:
            raise ValueError(
                "Invalid value for `booking_status` ({0}), must be one of {1}"
                .format(booking_status, allowed_values)
            )

        self._booking_status = booking_status

    @property
    def booking_email(self) -> str:
        """Gets the booking_email of this Booking.


        :return: The booking_email of this Booking.
        :rtype: str
        """
        return self._booking_email

    @booking_email.setter
    def booking_email(self, booking_email: str):
        """Sets the booking_email of this Booking.


        :param booking_email: The booking_email of this Booking.
        :type booking_email: str
        """

        self._booking_email = booking_email

    @property
    def total_cost(self) -> float:
        """Gets the total_cost of this Booking.


        :return: The total_cost of this Booking.
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost: float):
        """Sets the total_cost of this Booking.


        :param total_cost: The total_cost of this Booking.
        :type total_cost: float
        """

        self._total_cost = total_cost

    @property
    def card_name(self) -> str:
        """Gets the card_name of this Booking.


        :return: The card_name of this Booking.
        :rtype: str
        """
        return self._card_name

    @card_name.setter
    def card_name(self, card_name: str):
        """Sets the card_name of this Booking.


        :param card_name: The card_name of this Booking.
        :type card_name: str
        """

        self._card_name = card_name

    @property
    def card_number(self) -> str:
        """Gets the card_number of this Booking.


        :return: The card_number of this Booking.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number: str):
        """Sets the card_number of this Booking.


        :param card_number: The card_number of this Booking.
        :type card_number: str
        """

        self._card_number = card_number

    @property
    def qr_code(self) -> str:
        """Gets the qr_code of this Booking.


        :return: The qr_code of this Booking.
        :rtype: str
        """
        return self._qr_code

    @qr_code.setter
    def qr_code(self, qr_code: str):
        """Sets the qr_code of this Booking.


        :param qr_code: The qr_code of this Booking.
        :type qr_code: str
        """

        self._qr_code = qr_code

    @property
    def ticket_details(self) -> object:
        """Gets the ticket_details of this Booking.


        :return: The ticket_details of this Booking.
        :rtype: object
        """
        return self._ticket_details

    @ticket_details.setter
    def ticket_details(self, ticket_details: object):
        """Sets the ticket_details of this Booking.


        :param ticket_details: The ticket_details of this Booking.
        :type ticket_details: object
        """

        self._ticket_details = ticket_details
