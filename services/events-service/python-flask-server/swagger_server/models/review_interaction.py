# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ReviewInteraction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, interaction_id: int=None, review_id: int=None, interaction_account_id: int=None, review_upvoted: bool=None, review_flagged: bool=None):  # noqa: E501
        """ReviewInteraction - a model defined in Swagger

        :param interaction_id: The interaction_id of this ReviewInteraction.  # noqa: E501
        :type interaction_id: int
        :param review_id: The review_id of this ReviewInteraction.  # noqa: E501
        :type review_id: int
        :param interaction_account_id: The interaction_account_id of this ReviewInteraction.  # noqa: E501
        :type interaction_account_id: int
        :param review_upvoted: The review_upvoted of this ReviewInteraction.  # noqa: E501
        :type review_upvoted: bool
        :param review_flagged: The review_flagged of this ReviewInteraction.  # noqa: E501
        :type review_flagged: bool
        """
        self.swagger_types = {
            'interaction_id': int,
            'review_id': int,
            'interaction_account_id': int,
            'review_upvoted': bool,
            'review_flagged': bool
        }

        self.attribute_map = {
            'interaction_id': 'interaction_id',
            'review_id': 'review_id',
            'interaction_account_id': 'interaction_account_id',
            'review_upvoted': 'review_upvoted',
            'review_flagged': 'review_flagged'
        }

        self._interaction_id = interaction_id
        self._review_id = review_id
        self._interaction_account_id = interaction_account_id
        self._review_upvoted = review_upvoted
        self._review_flagged = review_flagged

    @classmethod
    def from_dict(cls, dikt) -> 'ReviewInteraction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReviewInteraction of this ReviewInteraction.  # noqa: E501
        :rtype: ReviewInteraction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interaction_id(self) -> int:
        """Gets the interaction_id of this ReviewInteraction.


        :return: The interaction_id of this ReviewInteraction.
        :rtype: int
        """
        return self._interaction_id

    @interaction_id.setter
    def interaction_id(self, interaction_id: int):
        """Sets the interaction_id of this ReviewInteraction.


        :param interaction_id: The interaction_id of this ReviewInteraction.
        :type interaction_id: int
        """

        self._interaction_id = interaction_id

    @property
    def review_id(self) -> int:
        """Gets the review_id of this ReviewInteraction.


        :return: The review_id of this ReviewInteraction.
        :rtype: int
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id: int):
        """Sets the review_id of this ReviewInteraction.


        :param review_id: The review_id of this ReviewInteraction.
        :type review_id: int
        """

        self._review_id = review_id

    @property
    def interaction_account_id(self) -> int:
        """Gets the interaction_account_id of this ReviewInteraction.


        :return: The interaction_account_id of this ReviewInteraction.
        :rtype: int
        """
        return self._interaction_account_id

    @interaction_account_id.setter
    def interaction_account_id(self, interaction_account_id: int):
        """Sets the interaction_account_id of this ReviewInteraction.


        :param interaction_account_id: The interaction_account_id of this ReviewInteraction.
        :type interaction_account_id: int
        """

        self._interaction_account_id = interaction_account_id

    @property
    def review_upvoted(self) -> bool:
        """Gets the review_upvoted of this ReviewInteraction.


        :return: The review_upvoted of this ReviewInteraction.
        :rtype: bool
        """
        return self._review_upvoted

    @review_upvoted.setter
    def review_upvoted(self, review_upvoted: bool):
        """Sets the review_upvoted of this ReviewInteraction.


        :param review_upvoted: The review_upvoted of this ReviewInteraction.
        :type review_upvoted: bool
        """

        self._review_upvoted = review_upvoted

    @property
    def review_flagged(self) -> bool:
        """Gets the review_flagged of this ReviewInteraction.


        :return: The review_flagged of this ReviewInteraction.
        :rtype: bool
        """
        return self._review_flagged

    @review_flagged.setter
    def review_flagged(self, review_flagged: bool):
        """Sets the review_flagged of this ReviewInteraction.


        :param review_flagged: The review_flagged of this ReviewInteraction.
        :type review_flagged: bool
        """

        self._review_flagged = review_flagged
