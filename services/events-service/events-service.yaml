swagger: "2.0"
info:
  description: "Events API for ZeroWing Event Management System."
  version: "1.0.0"
  title: "Events API"
host: "localhost:8081"
basePath: "/v1"
schemes:
- "https"
- "http"
paths:
  /events:
    get:
      summary: "Retrieve a List of Events. Search by Event Title, Event category or Event Description."
      tags:
        - Events
      operationId: "listEvents"
      produces:
      - "application/json"
      parameters:
      - name: "event_title"
        in: "query"
        description: "The Event Title to search for."
        required: false
        type: "string"
      - name: "event_category"
        in: "query"
        description: "The Event Category to search for."
        required: false
        type: "string"
      - name: "event_desc"
        in: "query"
        description: "The Event Description to search for."
        required: false
        type: "string"
      - name: "host_id"
        in: "query"
        description: "The Host ID to search for."
        required: false
        type: "string"
      - name: "event_status"
        in: "query"
        description: "The Event Status to search for."
        required: false
        type: "string"
      responses:
        "200":
          description: "Returns a list of Events. Returns empty array if no Events match the search criteria."
          schema:
            $ref: "#/definitions/EventList"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
    post:
      summary: "Used to create an Event."
      tags:
        - Events
      operationId: "createEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Event object containing the Event details."
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        "201":
          description: "Event created."
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid input."
          schema:
            $ref: "#/definitions/InvalidInputError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
  /events/{event_id}:
    get:
      summary: "Retrieve Event details by Event ID."
      tags:
        - Events
      operationId: "getEventDetails"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "ID of the Event to be retrieved."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Event details successfully retrieved."
          schema:
            $ref: "#/definitions/Event"
        "404":
          description: "Event not found."
          schema:
            $ref: "#/definitions/EventNotFoundError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError" 
    put:
      summary: "Used to update the Event details. Replaces the Event resource."
      tags:
        - Events
      operationId: "updateEvent"
      consumes:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "ID of the Event to be updated."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Event object to update. Performs a complete replace of the Event details."
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        "200":
          description: "Event successfully updated."
          schema:
            $ref: "#/definitions/Event"          
        "404":
          description: "Event not found." 
          schema:
            $ref: "#/definitions/EventNotFoundError"
        "400":
          description: "Invalid input."
          schema:
            $ref: "#/definitions/InvalidInputError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
    patch:
      summary: "Used to update the Status of a single Event e.g. Cancel an Event."
      tags:
        - Events
      operationId: "updateEventStatus"
      consumes:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "path"
        description: "ID of the Event to be updated."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "The patch operation to perform. Only Event status update is supported."
        required: true
        schema:
          $ref: "#/definitions/EventStatusUpdate"
      responses:
        "200":
          description: "Event status successfully updated."
          schema:
            $ref: "#/definitions/Event"
        "404":
          description: "Timeslot not found." 
          schema:
            $ref: "#/definitions/EventNotFoundError"
  /venues:
    get:
      summary: "Retrieve a List of Venues. Search by Venue Name."
      tags:
        - Venues
      operationId: "listVenues"
      produces:
      - "application/json"
      parameters:
      - name: "venue_name"
        in: "query"
        description: "The Venue Name to search for."
        required: false
        type: "string"
      responses:
        "200":
          description: "Returns a list of Venues. Returns empty array if no Venues match the search criteria."
          schema:
            $ref: "#/definitions/VenueList"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
    post:
      summary: "Used to create a Venue."
      tags:
        - Venues
      operationId: "createVenue"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Venue object containing Venue details."
        required: true
        schema:
          $ref: "#/definitions/Venue"
      responses:
        "201":
          description: "Venue created."
          schema:
            $ref: "#/definitions/Venue"
        "400":
          description: "Invalid input."
          schema:
            $ref: "#/definitions/InvalidInputError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
  /venues/{venue_id}:
    get:
      summary: "Retrieve Venue details by Venue ID."
      tags:
        - Venues
      operationId: "getVenueDetails"
      produces:
      - "application/json"
      parameters:
      - name: "venue_id"
        in: "path"
        description: "ID of the Venue to be retrieved."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Venue details successfully retrieved."
          schema:
            $ref: "#/definitions/Venue"
        "404":
          description: "Event not found."
          schema:
            $ref: "#/definitions/VenueNotFoundError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
  /tickets:
    get:
      summary: "Retrieve a List of Tickets. Search by Event ID and Ticket Status."
      tags:
        - Tickets
      operationId: "listTickets"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "query"
        description: "The Event ID to search for."
        required: false
        type: "string"
      - name: "ticket_status"
        in: "query"
        description: "The Ticket Status to search for."
        required: false
        type: "string"
      - name: "booking_id"
        in: "query"
        description: "The Booking ID to search for."
        required: false
        type: "string"
      responses:
        "200":
          description: "Returns a list of Tickets. Returns empty array if no Tickets match the search criteria."
          schema:
            $ref: "#/definitions/TicketList"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
  /bookings:
    get:
      summary: "Retrieve a List of Bookings. Search by Account ID and Booking Status."
      tags:
        - Bookings
      operationId: "listBookings"
      produces:
      - "application/json"
      parameters:
      - name: "account_id"
        in: "query"
        description: "The Account ID to search for."
        required: false
        type: "string"
      - name: "booking_status"
        in: "query"
        description: "The Booking Status to search for."
        required: false
        type: "string"
      - name: "event_id"
        in: "query"
        description: "The Event ID to search for."
        required: false
        type: "string"
      responses:
        "200":
          description: "Returns a list of Bookings. Returns empty array if no Bookings match the search criteria."
          schema:
            $ref: "#/definitions/BookingList"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
    post:
      summary: "Used to create a Booking."
      tags:
        - Bookings
      operationId: "createBooking"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Booking object containing the Booking details."
        required: true
        schema:
          $ref: "#/definitions/Booking"
      responses:
        "201":
          description: "Booking created."
          schema:
            $ref: "#/definitions/Booking"
        "400":
          description: "Invalid input."
          schema:
            $ref: "#/definitions/InvalidInputError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError" 
  /bookings/{booking_id}:
    get:
      summary: "Retrieve Booking details by Booking ID."
      tags:
        - Bookings
      operationId: "getBookingDetails"
      produces:
      - "application/json"
      parameters:
      - name: "booking_id"
        in: "path"
        description: "ID of the Booking to be retrieved."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Booking details successfully retrieved."
          schema:
            $ref: "#/definitions/Booking"
        "404":
          description: "Booking not found."
          schema:
            $ref: "#/definitions/BookingNotFoundError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
    patch:
      summary: "Used to update the Status of a single Booking e.g. Cancel a Booking."
      tags:
        - Bookings
      operationId: "updateBookingStatus"
      consumes:
      - "application/json"
      parameters:
      - name: "booking_id"
        in: "path"
        description: "ID of the Booking to be updated."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "The patch operation to perform. Only Booking status update is supported."
        required: true
        schema:
          $ref: "#/definitions/BookingStatusUpdate"
      responses:
        "200":
          description: "Booking status successfully updated."
          schema:
            $ref: "#/definitions/Booking"
        "404":
          description: "Booking not found." 
          schema:
            $ref: "#/definitions/BookingNotFoundError"
  /reviews:
    get:
      summary: "Retrieve a List of Reviews. Search by Event ID and Interaction Account ID."
      tags:
        - Reviews
      operationId: "listReviews"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "query"
        description: "The Event to search."
        required: false
        type: "string"
      - name: "interaction_acount_id"
        in: "query"
        description: "The ID of the user who is reading the review."
        required: false
        type: "string"
      responses:
        "200":
          description: "Returns a list of Reviews. Returns empty array if no Reviews match the search criteria."
          schema:
            $ref: "#/definitions/ReviewList"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
    post:
      summary: "Used to create a Review."
      tags:
        - Reviews
      operationId: "createReview"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Review object containing the Review details."
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        "201":
          description: "Review created."
          schema:
            $ref: "#/definitions/Review"
        "400":
          description: "Invalid input."
          schema:
            $ref: "#/definitions/InvalidInputError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
  /reviews/{review_id}:
    put:
      summary: "Used to update a Review. Replaces the Review resource."
      tags:
        - Reviews
      operationId: "updateReview"
      consumes:
      - "application/json"
      parameters:
      - name: "review_id"
        in: "path"
        description: "ID of the Review to be updated."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Review object to update."
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        "200":
          description: "Review successfully updated."
          schema:
            $ref: "#/definitions/Review"          
        "404":
          description: "Review not found." 
          schema:
            $ref: "#/definitions/ReviewNotFoundError"
        "400":
          description: "Invalid input."
          schema:
            $ref: "#/definitions/InvalidInputError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
  /review_interaction:
    post:
      summary: "Used to create a Review Intercation record."
      tags:
        - Reviews
      operationId: "createReviewInteraction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Review Interaction object containing the Review Interaction details."
        required: true
        schema:
          $ref: "#/definitions/ReviewInteraction"
      responses:
        "201":
          description: "Review Interaction Created."
          schema:
            $ref: "#/definitions/ReviewInteraction"
        "400":
          description: "Invalid input."
          schema:
            $ref: "#/definitions/InvalidInputError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
  /review_interaction/{interaction_id}:
    put:
      summary: "Used to update a Review Interaction record."
      tags:
        - Reviews
      operationId: "updateReviewInteraction"
      consumes:
      - "application/json"
      parameters:
      - name: "interaction_id"
        in: "path"
        description: "ID of the Review Interaction record to be updated."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Review Interaction object to update."
        required: true
        schema:
          $ref: "#/definitions/ReviewInteraction"
      responses:
        "200":
          description: "Review successfully updated."
          schema:
            $ref: "#/definitions/ReviewInteraction"        
        "404":
          description: "Review Interaction not found." 
          schema:
            $ref: "#/definitions/ReviewInteractionNotFoundError"
        "400":
          description: "Invalid input."
          schema:
            $ref: "#/definitions/InvalidInputError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
  /reward_points:
    get:
      summary: "Retrieve a List of Reward Points."
      tags:
        - RewardPoints
      operationId: "listRewardPoints"
      produces:
      - "application/json"
      parameters:
      - name: "event_id"
        in: "query"
        description: "The Event ID to search for."
        required: false
        type: "string"
      - name: "booking_id"
        in: "query"
        description: "The Booking ID to search for."
        required: false
        type: "string"
      - name: "reward_points_status"
        in: "query"
        description: "The Reward Points Status to search for."
        required: false
        type: "string"
      - name: "account_id"
        in: "query"
        description: "The Account ID to search for."
        required: false
        type: "string"
      responses:
        "200":
          description: "Returns a list of Reward points. Returns empty array if no Events match the search criteria."
          schema:
            $ref: "#/definitions/RewardPointsList"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
    post:
      summary: "Used to create a Reward Points."
      tags:
        - RewardPoints
      operationId: "createRewardPoints"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Reward Points object containing the Reward Points details."
        required: true
        schema:
          $ref: "#/definitions/RewardPoints"
      responses:
        "201":
          description: "Reward Points created."
          schema:
            $ref: "#/definitions/RewardPoints"
        "400":
          description: "Invalid input."
          schema:
            $ref: "#/definitions/InvalidInputError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
  /reward_points/{reward_points_id}:
    get:
      summary: "Retrieve Reward Points details by Reward Points ID."
      tags:
        - RewardPoints
      operationId: "getRewardPointsDetails"
      produces:
      - "application/json"
      parameters:
      - name: "reward_points_id"
        in: "path"
        description: "ID of the Reward Points to be retrieved."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Reward Points details successfully retrieved."
          schema:
            $ref: "#/definitions/RewardPoints"
        "404":
          description: "Reward Points not found."
          schema:
            $ref: "#/definitions/RewardPointsNotFoundError"
        "500":
          description: "Unexpected failure in the service layer."
          schema:
            $ref: "#/definitions/UnexpectedServiceError"
    patch:
      summary: "Used to update the Status of a single Event e.g. Cancel an Event."
      tags:
        - RewardPoints
      operationId: "updateRewardPointsStatus"
      consumes:
      - "application/json"
      parameters:
      - name: "reward_points_id"
        in: "path"
        description: "ID of the Reward Points to be updated."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "The patch operation to perform. Only Reward Points status update is supported."
        required: true
        schema:
          $ref: "#/definitions/RewardPointsStatusUpdate"
      responses:
        "200":
          description: "Reward Points status successfully updated."
          schema:
            $ref: "#/definitions/RewardPoints"
        "404":
          description: "Reward Points not found." 
          schema:
            $ref: "#/definitions/RewardPointsNotFoundError"
definitions:
  VenueList:
    type: array
    items:
      $ref: "#/definitions/Venue"
  Venue:
    type: object
    properties:
      venue_id:
        type: integer
        format: int64
        example: 1
      venue_name:
        type: string
        example: "Sydney Opera House"
      venue_desc:
        type: string
        example: "The Sydney Opera House is a multi-venue performing arts centre in Sydney."
      venue_img:
        type: string
        example: "1603dfd6-efb6-11ec-8ea0-0242ac120002.jpeg"
      venue_address:
        type: string
        example: "20 Smith Street, Newtown, NSW, 2000"
      seating:
        type: array
        items:
          $ref: "#/definitions/Seating"
  EventList:
    type: array
    items:
      $ref: "#/definitions/Event"
  TicketList:
    type: array
    items:
      $ref: "#/definitions/Ticket"
  BookingList:
    type: array
    items:
      $ref: "#/definitions/Booking"
  ReviewList:
    type: array
    items:
      $ref: "#/definitions/Review"
  RewardPointsList:
    type: array
    items:
      $ref: "#/definitions/RewardPoints"
  RewardPoints:
    type: object
    properties:
      reward_points_id:
        type: integer
        format: int64
        example: 1
      account_id:
        type: integer
        format: int64
        example: 2
      event_id:
        type: integer
        format: int64
        example: 3
      booking_id:
        type: integer
        format: int64
        example: 4
      reward_points_amount:
        type: number
        format: float
        example: 200.00
      reward_points_status:
        type: string
        enum: ["Pending", "Approved", "Cancelled"]
  Booking:
    type: object
    properties:
      booking_id:
        type: integer
        format: int64
        example: 1
      account_id:
        type: integer
        format: int64
        example: 2
      event_id:
        type: integer
        format: int64
        example: 2
      booking_status:
        type: string
        enum: ["Booked", "Cancelled", "Completed"]
      booking_email:
        type: string
        example: "bob@gmail.com"
      total_cost:
        type: number
        format: float
        example: 200.00
      card_name:
        type: string
        example: "Bob Smith"
      card_number:
        type: string
        example: "1111222233334444"
      qr_code:
        type: string
        example: "0012bdda-09a8-11ed-861d-0242ac120002"
      ticket_details:
        type: object
        properties:
          general:
            type: integer
            format: int64
            example: 1
          front:
            type: integer
            format: int64
            example: 2
          middle:
            type: integer
            format: int64
            example: 3
          back:
            type: integer
            format: int64
            example: 4
  Ticket:
    type: object
    properties:
      ticket_id:
        type: integer
        format: int64
        example: 1
      venue_id:
        type: integer
        format: int64
        example: 3
      event_id:
        type: integer
        format: int64
        example: 3
      booking_id:
        type: integer
        format: int64
        example: 5
      ticket_ref:
        type: string
        example: "general_1"
      ticket_status:
        type: string
        enum: ["Available", "Purchased", "Cancelled"]
      QR_code:
        type: string
        example: "bc7b098c-fb66-11ec-b939-0242ac120002"
      ticket_type:
        type: string
        enum: ["General", "Front", "Middle", "Back"]
      ticket_price:
        type: number
        format: float
        example: 80.90
  Review:
    type: object
    properties:
      review_id:
        type: integer
        format: int64
        example: 1
      event_id:
        type: integer
        format: int64
        example: 3
      reviewer_account_id:
        type: integer
        format: int64
        example: 3
      upvotes:
        type: integer
        format: int64
        example: 20
      rating:
        type: integer
        format: int64
        example: 5
      flag_count:
        type: integer
        format: int64
        example: 2
      review_text:
        type: string
        example: "We had a great time. Fantastic Event. Highly recommended."
      reply_text:
        type: string
        example: "Glad you had a great time."
      review_timestamp:
        type: string
        example: "2015-03-25T19:00:00+10:00"
      review_status:
        type: string
        enum: ["Active", "Removed"]
      review_interaction:
        allOf:
          - $ref: "#/definitions/ReviewInteraction"
        example:
          interaction_id: 1
          review_id: 1
          interaction_account_id: 2
          review_upvoted: true
          review_flagged: false
  ReviewInteraction:
    type: object
    properties:
      interaction_id:
        type: integer
        format: int64
        example: 1
      review_id:
        type: integer
        format: int64
        example: 2
      interaction_account_id:
        type: integer
        format: int64
        example: 2
      review_upvoted:
        type: boolean
        example: true
      review_flagged:
        type: boolean
        example: true
  Event:
    type: object
    properties:
      event_id:
        type: integer
        format: int64
        example: 1
      host_id:
        type: integer
        format: int64
        example: 12
      account_id:
        type: integer
        format: int64
        example: 10
      venue_id:
        type: integer
        format: int64
        example: 9
      gen_seat_price:
        type: number
        format: float
        example: 100.50
      front_seat_price:
        type: number
        format: float
        example: 80.90
      mid_seat_price:
        type: number
        format: float
        example: 70.90
      back_seat_price:
        type: number
        format: float
        example: 50.00
      event_title:
        type: string
        example: "Sydney KPOP Party"
      event_category:
        type: string
        example: "Music"
      event_short_desc:
        type: string
        example: "Sydney KPOP Party BTS Special!"
      event_desc:
        type: string
        example: "STRICTLY KPOP & K-HIPHOP! KPOP ALBUM GIVEAWAYS! LIVE DJS!"
      event_start_datetime:
        type: string
        example: "2015-03-25T19:00:00+10:00"
      event_end_datetime:
        type: string
        example: "2015-03-25T23:00:00+10:00"
      event_location:
        type: string
        example: "Shark Hotel Sydney, NSW"
      event_img:
        type: string
        example: "1603dfd6-efb6-11ec-8ea0-0242ac120002.jpeg"
      event_status:
        type: string
        enum: ["Upcoming", "Cancelled", "Completed"]
      tags:
        type: array
        items:
          $ref: "#/definitions/Tag"
  Tag:
    type: object
    properties:
      name:
        type: string
        example: Jazz
  Seating:
    type: object
    properties:
      seating_type:
        type: string
        example: "front"
      seating_number:
        type: integer
        format: int64
        example: 100
  EventStatusUpdate:
    type: object
    properties:
      op:
        type: string
        example: replace
        enum: [replace]
      path:
        type: string
        enum: [/event_status]
      value:
        type: string
        example: "Cancelled"
        enum: ["Upcoming", "Completed", "Cancelled"]
    required: 
      - op
      - path
      - value
  BookingStatusUpdate:
    type: object
    properties:
      op:
        type: string
        example: replace
        enum: [replace]
      path:
        type: string
        enum: [/booking_status]
      value:
        type: string
        example: "Cancelled"
        enum: ["Booked", "Cancelled", "Completed"]
    required: 
      - op
      - path
      - value
  RewardPointsStatusUpdate:
    type: object
    properties:
      op:
        type: string
        example: replace
        enum: [replace]
      path:
        type: string
        enum: [/reward_points_status]
      value:
        type: string
        example: "Approved"
        enum: ["Pending", "Approved", "Cancelled"]
    required: 
      - op
      - path
      - value
  Error:
    type: object
    properties:
      code:
        type: string
      type:
        type: string
      message:
        type: string
  EventNotFoundError:
    allOf:
      - $ref: "#/definitions/Error"
    example:
      code: 404
      type: EventNotFoundError
      message: "The following Event does not exist: %event_id%"
  VenueNotFoundError:
    allOf:
      - $ref: "#/definitions/Error"
    example:
      code: 404
      type: VenueNotFoundError
      message: "The following Venue does not exist: %venue_id%"
  BookingNotFoundError:
    allOf:
      - $ref: "#/definitions/Error"
    example:
      code: 404
      type: BookingNotFoundError
      message: "The following Booking does not exist: %booking_id%"
  ReviewNotFoundError:
    allOf:
      - $ref: "#/definitions/Error"
    example:
      code: 404
      type: ReviewNotFoundError
      message: "The following Review does not exist: %review_id%"
  ReviewInteractionNotFoundError:
    allOf:
      - $ref: "#/definitions/Error"
    example:
      code: 404
      type: ReviewInteractionNotFoundError
      message: "The following Review Interaction does not exist: %review_interaction_id%"
  RewardPointsNotFoundError:
    allOf:
      - $ref: "#/definitions/Error"
    example:
      code: 404
      type: RewardPointsNotFoundError
      message: "The following Reward Points does not exist: %reward_points_id%"
  InvalidInputError:
    allOf:
      - $ref: "#/definitions/Error"
    example:
      code: 400
      type: InvalidInputError
      message: "The following mandatory fields were not provided: %field_name_1%, %field_name_2%"
  UnexpectedServiceError:
    allOf:
      - $ref: "#/definitions/Error"
    example:
      code: 500
      type: UnexpectedServiceError
      message: "The following unexpected runtime error has occurred: %error%" 